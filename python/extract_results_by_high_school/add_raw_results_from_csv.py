# Import the pandas library for handling CSV and DataFrames
import pandas as pd

# Import a helper function that maps a school code (string) to its internal ID
from fetch_high_school_data.get_center import get_center_id

# Import the sqlite3 library to interact with an SQLite database
import sqlite3


def add_raw_results_from_csv():
    """
    Reads the output.csv file generated by parse_log.sh
    and inserts its content into the high_school_marks table
    of the SQLite database.
    """

    # Read the CSV file into a pandas DataFrame
    # - header=None: no header row in the CSV
    # - dtype={0: str}: ensure the first column (school code) is treated as a string
    df = pd.read_csv('output.csv', header=None, dtype={0: str})

    # Convert the DataFrame into a list of lists (rows)
    data = df.values.tolist()

    # Connect to the SQLite database (relative path to ../data/notas-pau.db)
    conn = sqlite3.connect("../data/notas-pau.db")
    cur = conn.cursor()
    
    # Map exam session types (calls) to numeric values
    calls = {"ordinaria": 0, "extraordinaria": 1, "global": 2}

    # Perform a batch insert of all rows from the CSV into the database
    cur.executemany(
        """
        INSERT INTO high_school_marks(
            high_school_id, enrolled_total, candidates, pass, pass_percentatge,
            average_bach, standard_dev_bach, average_compulsory_pau, standard_dev_pau,
            diference_average_bach_pau, year, call
        )
        VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """,
        [
            # For each row:
            # - Replace the first column (school code) with its ID using get_center_id
            # - Keep all columns except the last two (year, call type) in the middle
            # - Append year (last column) and call (second to last column mapped via 'calls')
            (get_center_id(row[0]),) + tuple(row[1:-2]) + (row[-1], calls[row[-2]])
            for row in data
        ],
    )
     
    # Save the changes in the database
    conn.commit()

    # Close the connection to the database
    conn.close()


# Entry point of the script
# If this file is executed directly (not imported), run the function
if __name__ == "__main__":
    add_raw_results_from_csv()
